import os
import json5
from qwen_agent.tools.base import BaseTool, register_tool
from qwen_agent.utils.output_beautify import typewriter_print
from datetime import datetime
from qwen_agent.agents import Assistant


from skyscanner_api import create_flight_search, get_flight_from_airport, user_share_flight

@register_tool('create_trip')
class QueryCost(BaseTool):
    description = 'Query the cost of a flight from the Skyscanner API using IATA codes.'
    parameters = [{
        'name': 'arrival_iata',
        'type': 'string',
        'description': 'Arrival airport IATA code (e.g., JFK, LHR, CDG). Must be a valid IATA code from the list of legal codes.',
        'required': True,
        # 'enum': ['AUH', 'JFK', 'LHR', 'CDG', 'DUB', 'HEL', 'BRG', 'LAX', 'SFO', 'ORD', 'DFW', 'ATL', 'PEK', 'HND', 'DXB', 'FRA', 'AMS', 'IST', 'MAD', 'BCN', 'MUC', 'ZRH', 'CPH', 'ARN', 'OSL', 'VIE', 'BRU', 'DUB', 'MAN', 'EDI', 'GLA', 'BRS', 'BHX', 'LPL', 'NCL', 'ABZ', 'INV', 'SOU', 'BOH', 'EXT', 'CWL', 'BFS', 'BHD', 'DSA', 'EMA', 'LBA', 'NQY', 'PLH', 'MME', 'HUY', 'NWI', 'STN', 'LTN', 'SEN', 'LCY', 'LGW', 'LHR', 'LBA', 'MAN', 'BHX', 'GLA', 'EDI', 'BRS', 'NCL', 'LPL', 'ABZ', 'INV', 'SOU', 'BOH', 'EXT', 'CWL', 'BFS', 'BHD', 'DSA', 'EMA', 'LBA', 'NQY', 'PLH', 'MME', 'HUY', 'NWI', 'STN', 'LTN', 'SEN', 'LCY', 'LGW', 'LHR', 'LSB']
    }, {
        'name': 'outbound_date',
        'type': 'string',
        'description': 'Outbound date in YYYY-MM-DD format.',
        'required': False
    }, {
        'name': 'inbound_date',
        'type': 'string',
        'description': 'Inbound date in YYYY-MM-DD format.',
        'required': False
    }, {
        'name': 'user_index_list',
        'type': 'array',
        'description': 'list of index of the user(s) involved in the trip',
        'required': False
    }]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        params = json5.loads(params)
        arrival_iata = params['arrival_iata']
        outbound_date = params['outbound_date']
        inbound_date = params.get('inbound_date', None)
        
        print(params)
        # Here you would implement the actual API call to Skyscanner.
        # For demonstration purposes, we will just return a mock response.

        # call the skyscanner api
        selected_users = [users[int(x)] for x in params['user_index_list']]

        options_user = []
        for user in selected_users:
            departure_iata = user['nearest_airport'][0] # Using the first airport's IATA code
            options = create_flight_search(departure_iata, arrival_iata, outbound_date, inbound_date)
            options_user.append({"name": user['name'], "options": options})
            # print(options)
        
        return json5.dumps({
            "departure_iata": departure_iata,
            "arrival_iata": arrival_iata,
            "outbound_date": outbound_date,
            "inbound_date": inbound_date,
            "options": options_user,
        }, ensure_ascii=False)

@register_tool('find_shared_flight')
class FindSharedFlight(BaseTool):
    description = 'Find the cheapest flight for the users.'
    parameters = [{
        'name': 'user_index_list',
        'type': 'array',
        'description': 'List of user indices to find shared flights for',
        'required': True
    }, {
        'name': 'start_date',
        'type': 'string',
        'description': 'Start date in YYYY-MM-DD format',
        'required': True
    }, {
        'name': 'end_date',
        'type': 'string',
        'description': 'End date in YYYY-MM-DD format',
        'required': True
    }, {
        'name': 'airport_iata_to',
        'type': 'string',
        'description': 'The IATA code of the airport to fly to.',
        'required': False
    }]

    def call(self, params: str, **kwargs) -> str:
        params = json5.loads(params)
        user_index_list = params['user_index_list']
        start_date = params['start_date']
        end_date = params['end_date']
        airport_iata_to = params.get('airport_iata_to', None)
        # Get selected users
        selected_users = [users[int(x)] for x in user_index_list]
        # print(selected_users)
        print(len(selected_users))
        
        # Prepare user data for flight search
        user_flight_data = []
        for user in selected_users:
            user_flight_data.append({
                "departure_iata": user['nearest_airport'][0],
                "start_date": start_date,
                "end_date": end_date,
                "airport_iata_to": airport_iata_to
            })

        print(user_flight_data)
        print(len(user_flight_data))
        
        # Find shared flights using the existing function
        raw_user_list = []
        for user_data in user_flight_data:
            res_user, places_user = get_flight_from_airport(
                user_data["departure_iata"],
                user_data["start_date"],
                user_data["end_date"],
                airport_iata_to=user_data["airport_iata_to"],
                adults=1
            )
            
            raw_user_list.append(res_user)

        print("PROBLEM2")

        # Get top 5 shared flight options
        triplet_overlap_options = user_share_flight(raw_user_list, users)
        
        return triplet_overlap_options

model_server = os.environ.get('LLM_URL', "enter LLM_URL")
print("model_server: ", model_server)
llm_cfg = {
    # Use the model service provided by DashScope:
    'model': 'qwen3:32b',
    'model_server': model_server,
    'generate_cfg': {
        'temperature': 0,
        'top_k': 1
    }
}

def make_bot(users):
    system_instruction = '''
    You are a travel planner assistant helping the user and their friends organize trips based on the user information provided in the system message.
    When the user requests travel advice or suggestions:
    - DO NOT ANSWER WHEN THE CONVERSATION IS TOO VAGUE and not clear.
    - First you need to use the function find_shared_flight to find the cheapest flight for ALL the users.
    - Then you need to rule out the flights that might not be liked by the users. Alway leave up to 5 UNIQUE options.
    - Then ask the user for their preferences on the available options.
    - Given the answer, use the create_trip function FOR EACH USER TO GET THE FLIGHT PRICE.

    Current year is 2025.

    User details:
    ''' + json5.dumps(users, ensure_ascii=False, indent=0)

    tools = ['create_trip', 'find_shared_flight']  # `code_interpreter` is a built-in tool for executing code.

    bot = Assistant(llm=llm_cfg,
                    system_message=system_instruction,
                    function_list=tools,
                    files=[])
    
    return bot