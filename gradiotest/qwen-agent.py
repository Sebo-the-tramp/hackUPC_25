import pprint
import urllib.parse
import json5
from qwen_agent.agents import Assistant
from qwen_agent.tools.base import BaseTool, register_tool
from qwen_agent.utils.output_beautify import typewriter_print

# defining the 4 people
users = [
    {
    "name": "Kevin",
    "location": "Ireland",
    "passport": ["Ireland"],
    "budget": 1200.0,
    "availability": "July 1 - July 20",
    "visited": ["UK", "France"],
    "preferences": {
      "climate": "warm",
      "activities": ["hiking", "museums"]
    },
    "age": 28,
    "language_spoken": ["English", "Irish"],
    "dietary_restrictions": "None",
    "nearest_airport": ["Dublin"]
  },
  {
    "name": "Karolina",
    "location": "US",
    "passport": ["US", "Poland"],
    "budget": 2000.0,
    "availability": "August",
    "visited": ["Germany", "Canada"],
    "preferences": {
      "climate": "mild",
      "activities": ["beach", "city tours"]
    },
    "age": 31,
    "language_spoken": ["English", "Polish"],
    "dietary_restrictions": "Vegetarian",
    "nearest_airport": ["JFK", "Warsaw Chopin"]
  },
  {
    "name": "Mikka",
    "location": "Finland",
    "passport": ["Finland"],
    "budget": 1500.0,
    "availability": "June 15 - July 10",
    "visited": ["Sweden", "Norway"],
    "preferences": {
      "climate": "cool",
      "activities": ["nature", "cycling"]
    },
    "age": 26,
    "language_spoken": ["Finnish", "English", "Swedish"],
    "dietary_restrictions": "Lactose intolerant",
    "nearest_airport": ["Helsinki"]
  },
  {
    "name": "Sebastian",
    "location": "Trento, Italy",
    "nearest_airport": ["Verona", "Bergamo"],
    "passport": ["Italy"],
    "budget": 1800.0,
    "availability": "July",
    "visited": ["Spain", "Ireland", "UAE", "Malta", "Bulgaria"],
    "preferences": {
      "climate": "hot",
      "activities": ["hiking", "climbing", "surfing", "bars"]
    },
    "age": 25,
    "language_spoken": ["Italian", "English", "German"],
    "dietary_restrictions": "Vegetarian"
  }
]


@register_tool('save_travel_data_json')
class JsonSave(BaseTool):
    description = 'Save important chat data in JSON format to build a contextual knowledge base ABOUT THE TRIP.'
    parameters = [{
        'name': 'json_data',
        'type': 'string',
        'description': 'Important information that needs to be saved in JSON format.',
        'required': True
    }]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        json_data = json5.loads(params)['json_data']
        print(json_data)
        # Save the JSON data to a file.
        with open('user_data.json', 'w') as f:
            json5.dump(json_data, f, ensure_ascii=False, indent=4)
        return json5.dumps(
            {'message': 'Data saved successfully!'},
            ensure_ascii=False)

@register_tool('save_user_data_json')
class JsonSave(BaseTool):
    description = 'Save important chat data in JSON format to build a contextual knowledge base ABOUT THE USER.'
    parameters = [{
        'name': 'json_data',
        'type': 'string',
        'description': 'Important information that needs to be saved in JSON format.',
        'required': True
    }]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        json_data = json5.loads(params)['json_data']
        print(json_data)
        # Save the JSON data to a file.
        with open('user_data.json', 'w') as f:
            json5.dump(json_data, f, ensure_ascii=False, indent=4)
        return json5.dumps(
            {'message': 'Data saved successfully!'},
            ensure_ascii=False)
    
@register_tool('query_cost_skyscanner')
class QueryCost(BaseTool):
    description = 'Query the cost of a flight from the Skyscanner API.'
    parameters = [{
        'name': 'departure',
        'type': 'string',
        'description': 'Departure city.',
        'required': True
    }, {
        'name': 'arrival',
        'type': 'string',
        'description': 'Arrival city.',
        'required': True
    }, {
        'name': 'date',
        'type': 'string',
        'description': 'Date of travel.',
        'required': True
    }]

    def call(self, params: str, **kwargs) -> str:
        # `params` are the arguments generated by the LLM agent.
        params = json5.loads(params)
        departure = params['departure']
        arrival = params['arrival']
        date = params['date']
        
        # Here you would implement the actual API call to Skyscanner.
        # For demonstration purposes, we will just return a mock response.
        
        return json5.dumps({
            "departure": departure,
            "arrival": arrival,
            "date": date,
            "price": 100.0
        }, ensure_ascii=False)

# Step 2: Configure the LLM you are using.
llm_cfg = {
    # Use the model service provided by DashScope:
    'model': 'qwen3:32b',
    'model_server': 'http://10.127.30.123:11434/v1',
    'generate_cfg': {
        'top_p': 0.8
    }
}

# Step 3: Create an agent. Here we use the `Assistant` agent as an example, which is capable of using tools and reading files.
system_instruction = '''
You are a travel agent. You will help the user and their friends to plan a trip.\
    You will ask the user for their preferences, and you will save the important information in JSON format.\
    The information about the users is provided in the system message.\
    When giving recommendations, always return 5 different options.

After receiving the user's request, you should:
- evaluate if it is necessary to answer. Since it is a multi-user chat, sometimes, you can just answer with _PASS_.
- if you can answer, you should answer it directly.
- save the important information from the user, like what he likes, where he would like to go and everything
that helps to define him and the trip, you should evaluate and use the json_saving tool to save it.
- when you propose a destination, FOR EACH USER, query skyscanner tool to get the cost of the trip.
- if you need to ask the user for more information, you should ask it.

User details:
''' + json5.dumps(users, ensure_ascii=False, indent=0)

tools = ['save_user_data_json', 'save_travel_data_json', 'query_cost_skyscanner']  # `code_interpreter` is a built-in tool for executing code.
files = [] # ['./examples/resource/doc.pdf']  # Give the bot a PDF file to read.
bot = Assistant(llm=llm_cfg,
                system_message=system_instruction,
                function_list=tools,
                files=files)

from qwen_agent.gui import WebUI
WebUI(bot).run()  # bot is the agent defined in the above code, we do not repeat the definition here for saving space.